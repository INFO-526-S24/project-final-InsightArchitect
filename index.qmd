---
title: "Evolution of Global Poverty: Regional Contributions Over Time"
subtitle: "INFO 526 - Project Final"
author: 
  - name: "InsightArchitect - Ayesha, Shreemithra, Anusha, Eeshaan, Kaarthik, Amaan"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "Project description"
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
  warning: false
  echo: false
---

## Abstract

This report investigates two critical inquiries related to global poverty dynamics and income inequality. The first question explores the conquest of extreme poverty across various global regions over time and examines the distribution of wealth among income groups. The second question delves into the influence of welfare regimes and economic growth rates on income inequality and poverty dynamics, considering different welfare types and international poverty lines. The approaches include interactive visualizations and advanced data analysis techniques to provide comprehensive insights into these complex issues.

## Introduction

The global battle against poverty demands a solid foundation of reliable and comprehensive data. This project, spearheaded by Insight Architect, delves into a wealth of information on global poverty trends sourced from Our World in Data. With a vast array of indicators spanning income, education, inequality, and welfare policies, this dataset serves as a cornerstone for researchers and policymakers alike. By employing advanced data visualization tools within a shiny app in R, the project aims to shed light on the intricate dynamics of poverty across different regions and timelines. With 4,877 rows and 108 columns, the dataset offers a treasure trove of metrics including the headcount ratio at the international poverty line and Gini coefficients. These metrics are essential for dissecting poverty trends and understanding the distribution of wealth among various income groups. Throughout this research, pivotal questions surrounding the reduction of extreme poverty, wealth distribution, and the impact of welfare regimes and economic growth on income inequality will be explored. By unraveling these complexities, the project seeks to provide deeper insights into poverty alleviation efforts and economic policies implemented across global regions over the past three decades.

```{r}
#| label: load-pkgs
#| message: false
#| echo: false
#| warning: false

library(tidyverse)
library(png)
library(ggplot2)
library(dplyr)
library(scales)  
library(tidyr)
#install.packages("gganimate")
#install.packages("globe4r")
#install.packages("remotes")
library(gganimate)

```

```{r}
#| label: load-dataset
#| message: false
#| warning: false
#| echo: false
#| 
pip_row_data <- read.csv('data/pip_dataset.csv')
ex_pro_data <- read.csv('data/globalextremepovertyrate_world-bank2020.csv')
```

## Questions 01: Who is Conquering Extreme Poverty in Various Global Regions Across Time? How does the distribution of wealth differ among various income groups?

### Approach

Stacked bar charts excel in illustrating both the total quantity and its breakdown. By portraying individuals residing in extreme poverty alongside those outside it as components of a whole for each year, this visualization method vividly showcases the evolution of total populations and their poverty statuses spanning nearly two centuries. Leveraging the robust capabilities of stacked bar charts in handling compositional data over time, this visualization approach emerges as an optimal selection for presenting intricate historical data on poverty. Covering a wide range of years from 1820 to 2017, it delivers information in a format that is not only informative but also visually engaging.

### Plot 01 : Stacked Bar Chart to know Poverty Trends over the year in the World

#### **Dependency Columns:**

For Plot 01 dependent columns are `"Number.of.people.living.in.extreme.poverty"`, `"Number.of.people.not.living.in.extreme.poverty"` & `"year"`

```{r}
#| label: stacked-bar-chart
#| message: false
#| warning: false
#| echo: false

# Filter the data to include only specified years
years_to_include <- c(1820, 
                      1850, 
                      1870, 
                      1890, 
                      1910, 
                      1929, 
                      1950, 
                      1960, 
                      1970, 
                      1980:2017)
ex_pro_data_filtered <- ex_pro_data %>%
  filter(Year %in% years_to_include) %>%
  mutate(Year = factor(Year, 
                       levels = years_to_include))  

# Transform data for plotting in a long format suitable for ggplot2
ex_pro_data_long <- pivot_longer(
  ex_pro_data_filtered,
  cols = c( "Number.of.people.living.in.extreme.poverty", 
            "Number.of.people.not.living.in.extreme.poverty"),
  names_to = "Status",
  values_to = "Count"
) %>%
    mutate(Count = Count / 1e9,  
         Status = recode(Status,
                         "Number.of.people.living.in.extreme.poverty" = "Population Live In Extreme Poverty",
                         "Number.of.people.not.living.in.extreme.poverty" = "Population Live Not in Extreme Poverty"))

# Stacked Bar Chart with counts on bars
stacked_absolute_bar_chart <- ggplot(ex_pro_data_long, 
                                     aes(x = Year, 
                                         y = Count, 
                                         fill = Status)) +
  geom_bar(stat = "identity") +
  geom_text(
    aes(label = scales::comma(Count, 
                              accuracy = 0.1), 
        group = Status),
    position = position_stack(vjust = 0.5),  
    color = "black",  
    size = 4  
  ) +
  labs(title = "Polulation Living in Extreme Poverty Level Around the World",
       subtitle = "Year: (1820-2017)",
        caption ="Data source: Ravallion (2016) updated with World Bank (2019) \nLink: OurWorldInData.org/poverty",
       x = "Year", 
       y = "Number of Population (Billions)",
       fill = "Status") +
  theme_minimal() +
  theme(legend.position = "bottom",
         plot.title = element_text(size = 20, 
                              face = "bold", 
                              hjust = 0.5),
         plot.subtitle = element_text(size = 18, 
                                 face = "bold", 
                                 hjust = 0.5),
         plot.caption = element_text(size = 10, 
                                 hjust = 1))  

# save the plots
ggsave("images/stacked_absolute_bar_chart.png", 
       stacked_absolute_bar_chart, 
       width = 17, 
       height = 8, 
       bg="white")

# Animated Plot
animated_plot <- stacked_absolute_bar_chart +
  transition_layers(
    layer_length = 1,    
    transition_length = 2,  
    keep_layers = TRUE  
  ) +
  enter_fade() +         
  enter_drift(x_mod = 1, y_mod = -1) +  
  exit_fade() +          
  ease_aes('linear')    

# Render the animation
#anim_save("images/animated_stacked_bar_chart02.gif", 
#          animated_plot, 
#          width = 1100, 
#          height = 600, 
#         fps = 10, 
#          duration = 15)
```

<img src="images/animated_stacked_bar_chart02.gif" alt="Stacked Bar Chart of Population by Poverty Status" width="100%"/>

**Visualization Descriptions:**

The global population's historical data, from 1820 to 2017, is visualized as a bar chart that shows those living in and out of extreme poverty. It displays two segments: those living in extreme poverty are indicated in the top segment `(shown in red)`, while the people not living in extreme poverty is represented in the bottom segment `(shown in blue`). The blue segment shows a clear increase over time, indicating a decrease in extreme poverty rates and an increase in the population living above the poverty line. On the other hand, there is a good tendency toward the reduction of poverty as the red segment diminishes, which is particularly evident after 1980. The population counts in billions are provided by the text labels on each bar segment. The referenced data source, Ravallion (2016), has been updated with additional information including World Bank (2019) data.

### Plot 02 : Distribution of Wealth Inequality Across Different Income Groups

#### **Dependency Columns:**

For Plot 02 dependent columns are `"gini"`, `"palma_ratio"`, `"s80_s20_ratio"`, `"p90_p10_ratio"`, `"p90_p50_ratio"`, `"p50_p10_ratio"` and `"mld"`

```{r}
#| label: ThreeD Illustration
#| message: false
#| warning: false
#| echo: false

library(ggplot2)
library(ggridges) 
library(dplyr)
library(viridis)  

# Transforming the data into a long format suitable for ridge plots
pip_data_long <- pip_row_data %>%
  filter(year != c(1973,1967,1963)) %>%
  pivot_longer(
    cols = c("gini", "palma_ratio", "s80_s20_ratio", "p90_p10_ratio", "p90_p50_ratio", "p50_p10_ratio", "mld"),
    names_to = "Inequality_Metric",
    values_to = "Metric_Value"
  ) %>%
  mutate(
    Inequality_Metric = recode(Inequality_Metric,
      "gini" = "National Income Inequality",
      "palma_ratio" = "Wealth Disparity Ratio",
      "s80_s20_ratio" = "Richest-poorest Income Ratio",
      "p90_p10_ratio" = "Richest-Poorest Gap Ratio",
      "p90_p50_ratio" = "Top-Middle Gap Ratio",
      "p50_p10_ratio" = "Middle-Poorest Gap Ratio",
      "mld" = "Inequality Level Measure"),
    Year = year  
  ) %>%
  filter(!is.na(Metric_Value), !is.na(Year))  

# Ensure there is no NA in important columns
pip_data_long <- pip_data_long %>% filter(!is.na(Metric_Value))



# Plotting the ridge plot with a gradient effect using geom_density_ridges_gradient
ridge_plot <- ggplot(pip_data_long, 
                     aes(x = Metric_Value, y = Inequality_Metric, fill = ..x.., group = interaction(Inequality_Metric, Year))) +
  geom_density_ridges_gradient(scale = 10, 
                               rel_min_height = 0.01, 
                               gradient_lwd = 1.) +
  scale_fill_viridis_c(option = "C") +
  labs(title = "Distribution of Wealth Inequality Across Different Years",
       subtitle = "{frame_time}",
       x = "Metric Value of Distribution",
       y = "Inequality Metric of Wealth Disparity",
       fill = "Intensity") +
  theme_ridges(font_size = 12, 
               grid = TRUE) +
  theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
        plot.subtitle = element_text(size = 16, hjust = 0.5),
        axis.title.x = element_text(size = 12, face = "bold", hjust = 0.5), 
        axis.title.y = element_text(size = 12, face = "bold", hjust = 0.5),
        legend.position = "right") +
  scale_x_continuous(limits = c(-2, 10), 
                     breaks = seq(0, 10, 1)) +
  transition_time(year) + 
  ease_aes('linear')

#Generate the animation
#animated_plot <- animate(ridge_plot, 
#                         width = 800, 
#                         height = 600, 
#                         renderer = gifski_renderer(),
#                         fps = 1,         
#                         duration = 10)
#anim_save("images/animated_ridge_plot.gif", animation = animated_plot)

```

<img src="images/animated_ridge_plot.gif" alt="Distribution of Wealth Inequality Across Different Years" width="100%"/>

#### Visualization Descriptions:

Less inequality is often suggested by higher values in the context of metrics such as the `Gini coefficient`, `Palma ratio`, or `S80/S20 ratio`, whereas more inequality is often suggested by lower values.

**Darker hues:** approaching the color purple, would symbolize a more equitable distribution, where income is dispersed more equally among the populace.

**Brighter hues:** which resemble yellow more closely, would be indicative of greater inequality and wealth concentration in a smaller number of hands. As an illustration, a country's level of inequality would be shown by a `Gini coefficient` that is closer to 0 (darker colors) or closer to 1 (brighter colors). In the same way, lower values for the `Palma` and `S80/S20 ratios` would indicate a narrower gap between the wealthiest and poorest groups in society.

### Discussion

The visualizations presented in this analysis offer valuable insights into the dynamics of poverty and wealth distribution across different global regions over time. By examining the stacked bar chart portraying poverty trends from 1820 to 2017, it becomes evident that significant strides have been made in reducing extreme poverty globally. The chart effectively illustrates the shift in the population living in extreme poverty versus those living above the poverty line, highlighting a consistent decline in extreme poverty rates, particularly after 1980. This suggests a positive trend in poverty alleviation efforts and economic development initiatives worldwide.

Moreover, the distribution of wealth inequality across different income groups, as depicted in the ridge plot, provides further context to understand poverty dynamics. The visualization showcases various inequality metrics over time, including the Gini coefficient, Palma ratio, and other indicators. The gradient effect employed in the plot enhances the visualization by depicting the intensity of wealth disparity across different years. Darker hues signify a more equitable distribution of wealth, while brighter hues indicate greater inequality. This nuanced depiction allows for a comprehensive analysis of wealth distribution trends and their implications for poverty reduction strategies.

## Question 2 : How do welfare regimes and economic growth rates influence income inequality and poverty dynamics across different countries and continents over the last three decades, influenced by varying welfare types and international poverty lines, and what implications do these interactions have for future global poverty reduction strategies?

### Approach

The approach outlined through the R Shiny dashboards and visualizations aims to provide a multifaceted analysis of global poverty and income inequality dynamics, leveraging diverse datasets and interactive tools for exploration. These visualizations allow users to delve into various aspects of poverty and inequality, including headcount ratios at international poverty lines, Gini coefficients, income gaps, and shortfall metrics across different income thresholds.

By offering interactive maps, line graphs, heatmaps, and 3D scatter plots, the dashboards enable users to dynamically explore trends and patterns over time and across countries. Users can select specific countries, years, and poverty thresholds to focus on, facilitating tailored analyses based on their interests and research objectives.

### Plot 03 : Headcount Ratio at International Poverty Line

```{r}
# Read the dataset
#install.packages("dplyr")
#install.packages("readr")
#install.packages("sf")
#install.packages("rnaturalearth")
#install.packages("leaflet")
#install.packages("viridis")
library(dplyr)
library(readr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)

# Reading the dataset
pip_final <- read.csv("data/cleaned_pip_final.csv")

# Filter and process the data
filtered_data <- pip_final %>%
  filter(year == 1996, ppp_version == 2017) %>%
  group_by(Country) %>%
  slice(1) %>%
  ungroup()

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Merge your data with the world map
world_data <- world %>%
  left_join(filtered_data, by = c("name" = "Country"))

# Scale the "gini" column
world_data$gini_scaled <- cut(world_data$gini, breaks = 10, labels = FALSE)

# Create the interactive map
# Initialize the Leaflet map
leaflet_map <- leaflet(world_data) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%  # Add base map layer
  addPolygons(
    fillColor = ~colorNumeric("viridis", headcount_ratio_international_povline)(headcount_ratio_international_povline),
    weight = 1,
    color = "white",
    fillOpacity = 0.7,
    highlightOptions = highlightOptions(
      weight = 3,
      color = "black",
      fillOpacity = 0.9,
      bringToFront = TRUE),
    label = ~paste("Country:", name, "<br>", 
                   "Headcount Ratio:", headcount_ratio_international_povline, "<br>", 
                   "Gini Scaled:", gini_scaled)
  ) %>%
  addLegend(
    "bottomright",
    pal = colorNumeric("viridis", world_data$headcount_ratio_international_povline),
    values = ~headcount_ratio_international_povline,
    title = "Headcount Ratio",
    opacity = 0.7
  )

# Render the map
leaflet_map
```

#### Visualization Descriptions:

Interactive world map that overlays socio-economic data for the year 1996, specifically focusing on the headcount ratio at the international poverty line and the Gini coefficient for different countries.

After reading and filtering the data for the year 1996 using PPP version 2017, it merges this information with spatial data from rnaturalearth to map the countries accordingly. It then categorizes the Gini index into ten groups for visual clarity. The interactive map is built using leaflet, applying a viridis color scale to represent the headcount ratio, which visualizes the proportion of the population living below the poverty line. Interactive elements include enhanced highlighting on hover and detailed tooltips for each country, providing an insightful visualization of global economic disparities. The map is finally rendered, allowing for interactive exploration of the data directly within RStudio or a web interface.

### Plot 04 : Dashboard Display 1

```{r}
#| label: dashboard 1
#| message: false
#| warning: false
#| echo: false
library(shiny)
library(plotly)
library(dplyr)
library(readr)
library(png)

# Load the image
img <- png::readPNG("images/DB1.png")

# Increase the size of the plot
plot(0, 0, type = "n", xlim = c(0, 2), ylim = c(0, 2), xlab = "", ylab = "", axes = FALSE)

# Display the image
rasterImage(img, 0, 0, 2, 2)  # Adjust the last two arguments (width and height) to control the size of the image


# Load data
your_data <- read_csv('data/pip_dataset.csv')

# Define UI
ui <- fluidPage(
  titlePanel("Income Inequality Dashboard"),
  sidebarLayout(
    sidebarPanel(
      selectInput("country", "Select Country:", choices = unique(your_data$country)),
      sliderInput("year_range", "Select Year Range:",
                  min = min(your_data$year), max = max(your_data$year),
                  value = c(min(your_data$year), max(your_data$year)),
                  step = 1)
    ),
    mainPanel(
      plotlyOutput("filtered_heatmap_plot"),
    )
  )
)

# Define server logic
server <- function(input, output) {
  # Filter data based on user-selected country and year range
  filtered_data <- reactive({
    your_data %>%
      filter(country == input$country & year >= input$year_range[1] & year <= input$year_range[2])
  })
  
  # Render filtered heatmap
  output$filtered_heatmap_plot <- renderPlotly({
    heatmap <- plot_ly(data = filtered_data(), x = ~year, y = ~country, z = ~gini, type = "heatmap", colorscale = "Viridis") %>%
      layout(
        title = paste("Filtered Income Inequality Heatmap for", input$country),
        xaxis = list(title = "Year"),
        yaxis = list(title = "Country"),
        colorbar = list(title = "Gini Index"),
        dragmode = 'zoom'
      )
    
    heatmap
  })

}

# Run the application
#shinyApp(ui = ui, server = server)

```

### Plot 04 : Dashboard Display 2

```{r}
#| label: dashboard 2
#| message: false
#| warning: false
#| echo: false
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)

# Function to display PNG image
display_image <- function(file_path) {
  img <- png::readPNG(file_path)
  plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(0, 1), xlab = "", ylab = "",axes = FALSE)
  rasterImage(img, 0, 0, 1, 1)
}
image_files <- c("images/DB2.png", "images/DB2-2.png")
for (file_path in image_files) {
  display_image(file_path)
}

# Assuming data is loaded here
data <- read.csv("data/cleaned_pip_final.csv")

ui <- fluidPage(
  titlePanel("Global Poverty and Inequality Dashboard"),
  sidebarLayout(
    sidebarPanel(
      selectInput("countryInput", "Select Country:",
                  choices = unique(data$Country)),
      sliderInput("yearInput", "Select Year Range:",
                  min = min(data$year), max = max(data$year),
                  value = c(min(data$year), max(data$year)))
    ),
    mainPanel(
      tabsetPanel(type = "tabs",
                  tabPanel("Gini Coefficient Trend", plotlyOutput("giniPlot")),
                  tabPanel("Palma Ratio", plotlyOutput("palmaPlot")),
                  tabPanel("P90/P10 Ratio", plotlyOutput("p90p10Plot")),
                  tabPanel("S80/S20 Ratio", plotlyOutput("s80s20Plot"))
      )
    )
  )
)

server <- function(input, output) {
  filteredData <- reactive({
    data %>%
      filter(Country == input$countryInput, year >= input$yearInput[1], year <= input$yearInput[2])
  })
  
  
  output$giniPlot <- renderPlotly({
    p <- ggplot(filteredData(), aes(x = year, y = gini, color = welfare_type, shape = welfare_type)) +
      geom_point(size = 3) +
      geom_line(aes(group = welfare_type), size = 1) +
      labs(title = "Trend of Gini Coefficient Over Time",
           x = "Year",
           y = "Gini Coefficient",
           color = "Welfare Type",
           shape = "Welfare Type") +
      theme_minimal() +
      theme(legend.position = "bottom")
    
    ggplotly(p)
  })
  
  output$palmaPlot <- renderPlotly({
    p <- ggplot(filteredData(), aes(x = year, y = palma_ratio, color = welfare_type, shape = welfare_type)) +
      geom_point(size = 3) +
      geom_line(aes(group = welfare_type), size = 1) +
      labs(title = "Trend of Palma Ratio Over Time",
           x = "Year",
           y = "Palma Ratio",
           color = "Welfare Type",
           shape = "Welfare Type") +
      theme_minimal() +
      theme(legend.position = "bottom")
    
    ggplotly(p)
  })

  output$p90p10Plot <- renderPlotly({
    # 3D scatter plot for P90/P10 Ratio
    plot_ly(filteredData(), x = ~year, y = ~p90_p10_ratio, z = ~welfare_type, type = "scatter3d", mode = "markers",
            marker = list(size = 5, color = ~p90_p10_ratio, colorscale = 'Viridis', showscale = TRUE),
            layout = list(title = "P90/P10 Ratio Over Time",
                          showlegend = TRUE,
                          scene = list(xaxis = list(title = "Year"),
                                       yaxis = list(title = "P90/P10 Ratio"),
                                       zaxis = list(title = "Welfare Type"),
                                       aspectmode = 'cube')))
  })

  output$s80s20Plot <- renderPlotly({
    # 3D scatter plot for S80/S20 Ratio
    plot_ly(filteredData(), x = ~year, y = ~s80_s20_ratio, z = ~welfare_type, type = "scatter3d", mode = "markers",
            marker = list(size = 5, color = ~s80_s20_ratio, colorscale = 'Viridis', showscale = TRUE),
            layout = list(title = "S80/S20 Ratio Over Time",
                          showlegend = TRUE,
                          scene = list(xaxis = list(title = "Year"),
                                       yaxis = list(title = "S80/S20 Ratio"),
                                       zaxis = list(title = "Welfare Type"),
                                       aspectmode = 'cube')))
  })
}

#shinyApp(ui = ui, server = server)

```

### Plot 04 : Dashboard Display 3

```{r}
#| label: dashboard 3
#| message: false
#| warning: false
#| echo: false
library(shiny)
library(plotly)
library(dplyr)
library(viridis)

# Read the dataset
data <- read.csv("data/cleaned_pip_final.csv")

# Function to display PNG image
display_image <- function(file_path) {
  img <- png::readPNG(file_path)
  plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(0, 1), xlab = "", ylab = "",axes = FALSE)
  rasterImage(img, 0, 0, 1, 1)
}
image_files <- c("images/DB3.png", "images/DB3-2.png", "images/DB3-3.png")
for (file_path in image_files) {
  display_image(file_path)
}

# Define UI
ui <- fluidPage(
  titlePanel("Dynamic Data Visualizations"),
  sidebarLayout(
    sidebarPanel(
      selectInput("selectCountry", "Select Country:", choices = unique(data$Country)),
      sliderInput("selectYear", "Select Year:",
                  min = min(data$year), max = max(data$year),
                  value = c(min(data$year), max(data$year)), step = 5, sep = ""),
      selectInput("selectChart", "Select Chart Type:",
                  choices = c("Heatmap", "Line Graph", "Headcount Ratios"))
    ),
    mainPanel(
      plotlyOutput("plot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  filteredData <- reactive({
    complete_data <- expand.grid(Country = unique(data$Country), year = seq(min(data$year), max(data$year)))
    merged_data <- merge(data, complete_data, by = c("Country", "year"), all = TRUE)
    merged_data[is.na(merged_data)] <- 0  # Fill NA values with 0
    merged_data %>%
      filter(Country %in% input$selectCountry, year >= input$selectYear[1], year <= input$selectYear[2])
  })
  
  output$plot <- renderPlotly({
    df <- filteredData()  # Capture the reactive data frame for use in plotting
    if(input$selectChart == "Heatmap") {
      p <- ggplot(df, aes(x = year, y = Country, fill = headcount_ratio_international_povline)) +
        geom_tile() +
        labs(title = "Heatmap of Poverty Levels", x = "Year", y = "Country") +
        scale_fill_viridis_c(option = "plasma", na.value = "lightgray")
      ggplotly(p)
    } else if(input$selectChart == "Line Graph") {
      plot_ly(df, x = ~year) %>%
        add_lines(y = ~mean, name = "Mean", line = list(color = 'blue'), mode = 'lines+markers', marker = list(symbol = "circle")) %>%
        add_lines(y = ~median, name = "Median", line = list(color = 'red'), mode = 'lines+markers', marker = list(symbol = "square")) %>%
        layout(title = "Trend of Mean and Median Incomes")
    } else if(input$selectChart == "Headcount Ratios") {
      p <- plot_ly(df, x = ~year) %>%
        add_lines(y = ~headcount_ratio_100, name = "$1/day", line = list(shape = 'linear', color = 'red'), marker = list(symbol = "circle")) %>%
        add_lines(y = ~headcount_ratio_1000, name = "$10/day", line = list(shape = 'spline', color = 'blue'), marker = list(symbol = "square")) %>%
        add_lines(y = ~headcount_ratio_2000, name = "$20/day", line = list(shape = 'vhv', color = 'green'), marker = list(symbol = "diamond")) %>%
        add_lines(y = ~headcount_ratio_3000, name = "$30/day", line = list(shape = 'vh', color = 'purple'), marker = list(symbol = "cross")) %>%
        add_lines(y = ~headcount_ratio_4000, name = "$40/day", line = list(shape = 'hv', color = 'orange'), marker = list(symbol = "triangle-up")) %>%
        layout(title = "Headcount Ratios Over Time", yaxis = list(title = "Percentage"), xaxis = list(title = "Year"),
               updatemenus = list(list(type = "buttons",
                                       buttons = list(list(method = "restyle",
                                                           args = list("visible", list(TRUE, FALSE, FALSE, FALSE, FALSE)),
                                                           label = "$1/day"),
                                                       list(method = "restyle",
                                                           args = list("visible", list(FALSE, TRUE, FALSE, FALSE, FALSE)),
                                                           label = "$10/day"),
                                                       list(method = "restyle",
                                                           args = list("visible", list(FALSE, FALSE, TRUE, FALSE, FALSE)),
                                                           label = "$20/day"),
                                                       list(method = "restyle",
                                                           args = list("visible", list(FALSE, FALSE, FALSE, TRUE, FALSE)),
                                                           label = "$30/day"),
                                                       list(method = "restyle",
                                                           args = list("visible", list(FALSE, FALSE, FALSE, FALSE, TRUE)),
                                                           label = "$40/day")))))
      p
    }
  })
}

# Run the application 
#shinyApp(ui = ui, server = server)

```

### Plot 04 : Dashboard Display 4

```{r}
#| label: dashboard 3.2
#| message: false
#| warning: false
#| echo: false

# Read your data
data <- read_csv("data/cleaned_pip_final.csv")

# Function to display PNG image
display_image <- function(file_path) {
  img <- png::readPNG(file_path)
  plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(0, 1), xlab = "", ylab = "",axes = FALSE)
  rasterImage(img, 0, 0, 1, 1)
}
image_files <- c("images/BD4.png")
for (file_path in image_files) {
  display_image(file_path)
}

# Define UI
ui <- fluidPage(
  titlePanel("Poverty Metrics Visualization"),
  sidebarLayout(
    sidebarPanel(
      selectInput("selectCountry", "Select Country:", choices = unique(data$Country)),
      sliderInput("selectYear", "Select Year Range:",
                  min = min(data$year), max = max(data$year),
                  value = c(min(data$year), max(data$year)))
    ),
    mainPanel(
      tabsetPanel(type = "tabs",
                  tabPanel("Poverty Line $1", plotlyOutput("plot1")),
                  tabPanel("Poverty Line $10", plotlyOutput("plot10")),
                  tabPanel("Poverty Line $20", plotlyOutput("plot20")),
                  tabPanel("Poverty Line $30", plotlyOutput("plot30")),
                  tabPanel("Poverty Line $40", plotlyOutput("plot40"))
      )
    )
  )
)

# Define server logic
server <- function(input, output) {
  filteredData <- reactive({
    data %>%
      filter(Country == input$selectCountry, 
             year >= input$selectYear[1], 
             year <= input$selectYear[2])
  })
  
  # Function to create each plot
  output$plot1 <- renderPlotly({
    df <- filteredData()
    plot_ly(df, x = ~year, mode = "lines", stackgroup = "one") %>%
      add_trace(y = ~income_gap_ratio_100, name = "Income Gap Ratio $1", fillcolor = 'rgba(255, 0, 0, 0.5)') %>%
      add_trace(y = ~total_shortfall_100, name = "Total Shortfall $1", fillcolor = 'rgba(0, 0, 255, 0.5)') %>%
      layout(title = "Metrics for Poverty Line $1/day",
             xaxis = list(title = "Year"),
             yaxis = list(title = "Value"),
             showlegend = TRUE)
  })
  
  output$plot10 <- renderPlotly({
    df <- filteredData()
    plot_ly(df, x = ~year, mode = "lines", stackgroup = "one") %>%
      add_trace(y = ~income_gap_ratio_1000, name = "Income Gap Ratio $10", fillcolor = 'rgba(255, 0, 0, 0.5)') %>%
      add_trace(y = ~total_shortfall_1000, name = "Total Shortfall $10", fillcolor = 'rgba(0, 0, 255, 0.5)') %>%
      layout(title = "Metrics for Poverty Line $10/day",
             xaxis = list(title = "Year"),
             yaxis = list(title = "Value"),
             showlegend = TRUE)
  })

  output$plot20 <- renderPlotly({
    df <- filteredData()
    plot_ly(df, x = ~year, mode = "lines", stackgroup = "one") %>%
      add_trace(y = ~income_gap_ratio_2000, name = "Income Gap Ratio $20", fillcolor = 'rgba(255, 0, 0, 0.5)') %>%
      add_trace(y = ~total_shortfall_2000, name = "Total Shortfall $20", fillcolor = 'rgba(0, 0, 255, 0.5)') %>%
      layout(title = "Metrics for Poverty Line $20/day",
             xaxis = list(title = "Year"),
             yaxis = list(title = "Value"),
             showlegend = TRUE)
  })

  output$plot30 <- renderPlotly({
    df <- filteredData()
    plot_ly(df, x = ~year, mode = "lines", stackgroup = "one") %>%
      add_trace(y = ~income_gap_ratio_3000, name = "Income Gap Ratio $30", fillcolor = 'rgba(255, 0, 0, 0.5)') %>%
      add_trace(y = ~total_shortfall_3000, name = "Total Shortfall $30", fillcolor = 'rgba(0, 0, 255, 0.5)') %>%
      layout(title = "Metrics for Poverty Line $30/day",
             xaxis = list(title = "Year"),
             yaxis = list(title = "Value"),
             showlegend = TRUE)
  })

  output$plot40 <- renderPlotly({
    df <- filteredData()
    plot_ly(df, x = ~year, mode = "lines", stackgroup = "one") %>%
      add_trace(y = ~income_gap_ratio_4000, name = "Income Gap Ratio $40", fillcolor = 'rgba(255, 0, 0, 0.5)') %>%
      add_trace(y = ~total_shortfall_4000, name = "Total Shortfall $40", fillcolor = 'rgba(0, 0, 255, 0.5)') %>%
      layout(title = "Metrics for Poverty Line $40/day",
             xaxis = list(title = "Year"),
             yaxis = list(title = "Value"),
             showlegend = TRUE)
  })
}

# Run the application 
#shinyApp(ui = ui, server = server)


```

### Plot 04 : Dashboard Display 5

```{r}
#| label: dashboard 5
#| message: false
#| warning: false
#| echo: false
library(shiny)
library(globe4r)
library(dplyr)

# Read the dataset only once outside the server function to improve performance
pip_final <- read.csv("data/cleaned_pip_final.csv")

# Function to display PNG image
display_image <- function(file_path) {
  img <- png::readPNG(file_path)
  plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(0, 1), xlab = "", ylab = "",axes = FALSE)
  rasterImage(img, 0, 0, 1, 1)
}
image_files <- c("images/DB5.png", "images/DB5-2.png", "images/DB5-3.png", "images/DB5-4.png")
for (file_path in image_files) {
  display_image(file_path)
}

# Define UI
ui <- fluidPage(
  titlePanel("Global Poverty Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("yearInput", "Select Year:", choices = unique(pip_final$year)),
      selectInput("pppInput", "Select PPP Version:", choices = unique(pip_final$ppp_version))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Globe 1", globeOutput("globe1")),
        tabPanel("Globe 2", globeOutput("globe2")),
        tabPanel("Globe 3", globeOutput("globe3")),
        tabPanel("Globe 4", globeOutput("globe4"))
      )
    )
  )
)

# Define server logic
server <- function(input, output) {
  
  # Filter data based on user input
  filteredData <- reactive({
    pip_final %>%
      filter(year == input$yearInput, ppp_version == input$pppInput)
  })

  # Prepare the dataset for globe plotting for each metric
  globeData <- function(data, metric_scaled) {
    data %>%
      mutate(
        scaled_value = 
          (metric_scaled - min(metric_scaled, na.rm = TRUE)) /
          (max(metric_scaled, na.rm = TRUE) - min(metric_scaled, na.rm = TRUE)),
        Latitude = round(as.numeric(Latitude), 2),
        Longitude = round(as.numeric(Longitude), 2)
      )
  }

  # Set up color palettes
  colors_frostbite <- colorRampPalette(c("#d8f3ff", "#000046"))(100)
  colors_electric_lime <- colorRampPalette(c("#a8e063", "#007f5f"))(100)
  colors_lavender <- colorRampPalette(c("#e6e6fa", "#967bb6"))(100)
  colors_maroon <- colorRampPalette(c("#c15050", "#800000"))(100)

  # Render each globe using different metrics and colors
  renderGlobeHelper <- function(outputId, colorPalette, metric) {
    output[[outputId]] <- renderGlobe({
      data <- globeData(filteredData(), filteredData()[[metric]])
      create_globe(height = "100vh") %>%
        labels_data(data = data) %>%
        labels_lat(lat = "Latitude") %>%
        labels_lon(lon = "Longitude") %>%
        labels_text(text = "Country") %>%
        labels_altitude(altitude = 30) %>%
        globe_choropleth(
          coords(
            country = Country.Code,
            altitude = scaled_value,
            cap_color = scaled_value
          ),
          data = data
        ) %>%
        polygons_side_color(color = constant("#ffffaa60")) %>%
        scale_choropleth_cap_color(colorPalette) %>%
        scale_choropleth_altitude(0.04, 0.2) %>%
        globe_img_url(image_url("blue")) %>%
        globe_rotate(speed = 0.5, rotate = TRUE)
    })
  }

  # Apply the helper function to each globe
  renderGlobeHelper("globe1", colors_frostbite, "headcount_ratio_international_povline")
  renderGlobeHelper("globe2", colors_electric_lime, "gini")
  renderGlobeHelper("globe3", colors_lavender, "avg_shortfall_international_povline")
  renderGlobeHelper("globe4", colors_maroon, "income_gap_ratio_international_povline")
}

# Run the application
#shinyApp(ui = ui, server = server)

```

#### Visualization Descriptions:

The collection of R shiny codes above provided is designed to set up several interactive dashboards using the Shiny framework, enhanced by Plotly and other visualization libraries to present dynamic data visualizations. collectively, they provide a comprehensive overview of global socio-economic issues such as poverty, income inequality, and economic disparities, across different time periods and countries.

### Discussion

The strategy proposed for examining global poverty and income inequality, accompanied by the series of dashboards and map plot discussed earlier, offers a thorough framework for comprehending and illustrating socio-economic trends worldwide. A significant aspect of this approach lies in its emphasis on customization and interactivity. By allowing users to dynamically select countries and timeframes, the dashboards cater to diverse analytical needs, facilitating precise data exploration and presentation. This flexibility not only enhances user engagement but also fosters a deeper comprehension of the data, thereby enabling more informed decision-making processes.

Moreover, the inclusion of various visualization types within the dashboards, such as heatmaps, line graphs, 3D scatter plots, and globe visualizations, contributes to visual diversity and versatility in data representation. Each visualization type serves distinct analytical purposes, accommodating different preferences and analytical requirements. For example, heatmaps effectively convey density and temporal trends, while globe visualizations offer a global perspective, aiding in the identification of geographical patterns in socio-economic data. Leveraging technologies like Shiny and Plotly ensures that the dashboards are not only interactive but also visually appealing and functional.

### Conclusion 

In summary, the comprehensive approach outlined for analyzing global poverty and income inequality, coupled with the series of interactive dashboards and geographical map plot, represents a significant step forward in understanding and addressing socio-economic disparities worldwide. Through user customization, interactivity, and visual diversity, these tools empower users to explore the data trends and patterns, facilitating informed decision-making and policy formulation. The integration of technologies like Shiny and Plotly ensures both functionality and accessibility, while the inclusion of geographical analysis adds a crucial dimension to understanding regional disparities.

By democratizing access to economic data and simplifying its representation, these tools bridge the gap between data and decision-makers, fostering a culture of evidence-based policymaking and targeted interventions. Overall, this holistic approach underscores the importance of data-driven strategies in tackling global poverty and inequality. Through continued refinement and utilization of these tools, stakeholders can work towards achieving sustainable development goals and fostering inclusive growth for all.

## Repo Organization

The following folders comprise the project repository

-   **.github/:** Files related to GitHub, including actions, workflows, and issue-specific templates, go in this directory.

-   **\_extra/:** Set aside for random files that don't easily fit into other project categories, this area serves as a repository for a range of supplemental papers.

-   **\_freeze/:** There are frozen environment files in this directory that contain detailed information on the dependencies and environment setup of the project.

-   **data/:** Designated especially for the storage of I data files that are necessary for the operation of the project; these include input files, datasets, and other vital data resources.

-   **images/:** This directory preserves visual components essential to project documentation and presentation by acting as a repository for all of the visual assets used throughout the project, such as charts, screenshots, and diagrams.

-   **.gitignore:** By defining exclusions from version control, this file helps to expedite the versioning process by preventing Git from tracking certain files and folders.

-   **README.md:** Acting as the principal repository for project data, this README provides pertinent information regarding project setup, usage guidelines, and a broad summary of the goals and scope of the project.

-   **\_quarto.yml:** Serving as a key configuration file for Quarto, this file contains a variety of settings and parameters controlling how Quarto documents are created and displayed, allowing for customization and output control.

-   **about.qmd:** This Quarto Markdown file adds to the project documentation by clarifying the goal of the project, offering more background information, contributor insights, and other important project elements.

-   **index.qmd:** This is our project's primary documentation page. Comprehensive details of our project, including with all the code and graphics, may be found in this Quarto Markdown file.

## References

\[1\] Source Data link : [*https://ourworldindata.org/grapher/world-population-in-extreme-poverty-absolute?time=earliest..2015*](https://ourworldindata.org/grapher/world-population-in-extreme-poverty-absolute?time=earliest..2015)

\[2\] Used Generative AI to know the solutions of the errors link: <https://chat.openai.com/>

\[3\] Used some techniques an codes from class lectures ppt file, Link: <https://datavizaz.org/>

\[4\] Repo Organization idea from, Link: <https://github.com/INFO523-S24/project-final-datadetectives/blob/main/index.qmd/>
